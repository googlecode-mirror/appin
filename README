Appin is a simple framework to design and evaluate user interfaces for touch 
enabled phones using simple web techniques.

License:

Copyright (c) 2013, Fabian Str√∂m (fs@fabianstrom.se)
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this 
   list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, 
   this list of conditions and the following disclaimer in the documentation 
   and/or other materials provided with the distribution.
 * Neither the name of the <organization> nor the names of its contributors may
   be used to endorse or promote products derived from this software without 
   specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

** Table of contents ***********************************************************

0. INTRODUCTION

1. FILES AND DESCRIPTIONS
  1.1 index.php
  1.2 viewHandler.php
  1.3 views
  1.4 appin-js.js 

2. INSTALLATION

3. HOW TO USE
  3.1 About views
  3.2 Adding a view
  3.3 Linking / switching between views
  3.4 Adding a menu for the menu button
  3.5 Adding a physical button

4. ABOUT THE PHYSICAL BUTTONS
  4.1 Back
  4.2 Reset
  4.3 Menu
  4.4 Rotate

5. INCLUDING IMAGES AND OTHER THINGS
  5.1 Example

6. API DESCRIPTION
  6.1 setView
  6.2 changeMode
  6.3 setStatus

7. OUTLINES OF APPIN-JS.JS AND VIEWHANDLER.PHP

** 0. Introduction *************************************************************

Appin is a simple framework written in php/html/javascript to design and
evaluate user interfaces for touch enabled phones using a web interface. 

The goal is to provide a method to switch between different screens (or views as 
they are called in this document) and give total control over the rest of the 
interface. For simplicity, jQuery is available (and used for the view switching)
to use within the views.

** 1. FILES AND DESCRIPTIONS ***************************************************

Appin relies on the following files:
 - index.php, where everything is presented to the end evaluator
 - viewHandler.php, a php script to support the switching of views
 - views, a folder with the views
 - appin-js.js, the javascript that makes up the core functionality

1.1 index.php
Index.html presents everything to the evaluator and is a simple simulator for
a phone with three physical buttons: back, reset and menu (please see 4. ABOUT
BUTTONS to learn more). 

In the top of the file you can change the width and/or height of the simulated
phone. (A good thing to keep in mind is that the iPhone has an aspect ratio of
3:2.) The default is a width of 320 pixels and a height of 480 pixels.

1.2 viewHandler.php
ViewHandler.php is a php script that (with the help of AJAX) render the views.
For more information, please consult the comments in viewHandler.php.

1.3 views
In the directory "views" the views are placed (see 3.1).
As default there is only one view, main. IT SHOULD NOT BE DELETED.

1.4 appin-js.js 
The javascript functions to handle the view switching.

** 2. INSTALLATION *************************************************************

Copy index.php, jquery.js, viewHandler.php and (the directory) views to the 
desired location on a web server. You need to have php enabled for Appin to 
work.

If Appin is to used offline, it is a good idea to download jQuery and disable
the use of Google CDN.

** 3. HOW TO USE ***************************************************************

3. HOW TO USE
Every screen that is presented is called a "view". When the application is
started the view "main" is shown. jQuery is available for using.

3.1 About views:
Each view is a set of three files (index.html, css.css and js.js) that lies in a
folder with the same name as the view. All the views are placed in the "views"
directory.

3.2 Adding a view:
When adding a view, create a folder with its name and the three files 
index.html, css.css and js.js. Then write appropriate content for each file 
(place the html in index.html, the css in css.css and the javascript in js.js).

3.3 Linking / switching between views:
To change the view call the javascript function setView(view), where view is a
string with the name of the view to switch to. This can (for example) be done
with a button:
	<button onclick="setView('myView');">Change view to myView</button>
or a link:
	<a href="" onclick="setView('myView');">Change view to myView</a>

3.4 Adding a menu for the menu button
A div element with the id "menu" is considered to be a menu. Use this and place
and create the menu as you wish. When the user presses the menu button the div
will be toggled by jQuery.

3.4.1 About rotating
To support the menu when the view has been rotated it, please don't give the
menu a relative position and hard code distance to the top.

If you want to rotate the view, call changeMode("portrait") or 
changeMode("landscape") to change to the desired mode.

3.5 Adding a physical button
To add a physical button there are three things you need to do:
 - Add the html for the button in <div id="buttons">:
   <div class="menuButton button" id="myButtonId">myButton</div>
 - Update $number_of_physical_buttons (at the top of index.php) to the correct
   number of buttons
 - Add a click handler for the button, please see appin-js.js (the 
   $(document).ready(function() {}); part).

** 4. ABOUT THE PHYSICAL BUTTONS ***********************************************

There are three "physical" buttons: back, reset and menu to make the simulator
more familiar to users of the Android mobile operating system. Each button has
its own actions.

4.1 Back
The back button shows the previous view.

4.2 Reset 
The Reset button restarts the application.

4.3 Menu
The menu button tries to open or close the menu. Please see 3.4 for more 
information.

4.4 Rotate
Press this button to switch between portrait and landscape mode.

** 5. INCLUDING IMAGES AND OTHER THINGS ****************************************

To include an image in a view, place the image IN THE DIRECTORY OF THE VIEW (or
a sub directory) and write as you normally would:
	<img src="myImage.jpg" ...>
viewHandler.php will automatically add the correct path for the image by
replacing src="myImage.jpg" with src="views/myView/myImage.jpg".

EVERY src="..." WILL BE REPLACED WITH src="views/myView/..." in index.html.

5.1 Example
Suppose you have the image monkey.jpg placed in the view animals.
To include the image, write
	<img src="monkey.jpg">
The presented html will be 
	<img src="views/animals/monkey.jpg">
and the image will appear as it should.

** 6. API DESCRIPTION **********************************************************
Here is a description of the available api calls:

6.1 setView
Prototype: setView(view)
Desctiption: Changes the view to the given one. view should be a string with the
desired view to switch to. The status is updated accordingly while changing the 
view.

6.2 changeMode
Prototype: changeMode("portrait") or changeMode("landscape")
Description: Rotate the device to portrait or landscape mode. The status is
updated whilst rotating.

6.3 setStatus
Prototype: setStatus(stat)
Description: Set (the html code) stat as the html code of the div id="status".

** 7. OUTLINES OF APPIN-JS.JS AND VIEWHANDLER.PHP ******************************

7.1 Outline of appin-js.js
  - First we declare some variables: viewStack (to keep track of how the user
    changes views), currentView (to know what view we are in) and mode (portrait
    or landscape).
  - Then we sets some things up at page startup:
    + Set the view to main.
    + Set the mode to portrait.
    + Set handlers for when clicking the physical buttons.
  - In the function setView we writes the view switching functionality:
    + We check the argument is a string.
    + Then we set the status, pushes the current view on the history stack and
      updates the currentView variable to the new view.
    + We hide the menu.
    + We load the new view via ajax (and checks for errors).
    + At last we updates the html/css/js and sets the status to done.
  - In changeMode we changes the mode:
    + First we check newMode is either "portrait" or "landscape".
    + We sets the mode variable to the new mode and updates the status.
    + We removes every mode-related css class from all affected elements.
    + At last we add the correct classes to all the affected elements.
    + Then we updates the status to done.
  - In setStatus we just sets the html of the <div id="status"> element.

7.2 Outline of viewHandler.php
  - First we check there is a $_GET["v"] variable, show an error page if not.
  - We get the view variable and the path
  - Use regexp to check there are no ".." in the path (to avoid directory 
    traversal).
  - Check if the directory of the view do exist
  - Read the html, js and css files.
  - Check the files were read.
  - Use regexp to change (in the html file) src="..." to src="views/view/..."
    and update the html variable
  - Create an array of the html, js and the css and json-encode it.
  - Send the json http header and then the json object.
